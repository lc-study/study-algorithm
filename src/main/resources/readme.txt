1.表、栈和队列
2.树(一一实现)
    binary tree(二叉树)
    查找树ADT(二叉查找树)
    treap tree(可能是最简单的一种二叉查找树)
    AVL树(平衡二叉查找树)
    splay tree(伸展树) - AVL树的一个变种
    2-3-4树 - 2-3-4树是一种阶为4的B树
    red black tree(红黑树) - 着色的二叉查找树、AVL树的一个变种；
                            红黑树和2-3-4树是完全等价的，由于绝大多数编程语言直接实现2-3-4树会非常繁琐，
                            所以一般是通过实现红黑树来实现替代2-3-4树，
                            而红黑树本也同样保证在O(lgn)的时间内完成查找、插入和删除操作
    aa tree(AA树) - 红黑树的一个变种
    b-tree/b+tree - mysql一种索引的数据结果，很复杂，能谈其性质和相关的特点即可
3.散列
4.优先队列(堆)
5.图
6.堆 - 二叉堆（最小堆和最大堆），还有其他的，比如：斐波那契堆等
    6.1 最小堆，是一种经过排序的完全二叉树，其中任一非终端节点的数据值均不大于其左子节点和右子节点的值。
        6.1.1 一棵完全二叉树
        6.1.2 父节点小于等于子节点
    6.2 最大堆，是一种经过排序的完全二叉树，其中任一非终端节点的数据值均不小于其左子节点和右子节点的值。
            6.2.1 一棵完全二叉树
            6.2.2 父节点大于等于子节点
注: 1.由于堆是一棵完全二叉树，用数组实现即可（下标从0开始）；
    2.父节点下标[i]和子节点下标[jl,jr]的关系
        i = (j - 1) >>> 1
        jl = ((i + 1) <<< 1) - 1
        jr = (i + 1) <<< 1